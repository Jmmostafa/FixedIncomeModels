{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"class annuity_calculator:\n    def __init__(self, payment, interest_rate, periods):\n        self.payment = payment\n        self.interest_rate = interest_rate\n        self.periods = periods\n\n    def calculate_future_value(self):\n        fv = self.payment * ((1 + self.interest_rate) ** self.periods - 1)/self.interest_rate\n        return fv\n\n\n# calculating the values\nannuity_data = annuity_calculator(payment = 50, interest_rate = 0.10, periods = 3)\nfuture_value = annuity_data.calculate_future_value()\nprint(f\"Future value annuity: ${future_value:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:25.114197Z","iopub.execute_input":"2025-08-21T15:27:25.114465Z","iopub.status.idle":"2025-08-21T15:27:25.124593Z","shell.execute_reply.started":"2025-08-21T15:27:25.114438Z","shell.execute_reply":"2025-08-21T15:27:25.123477Z"}},"outputs":[{"name":"stdout","text":"Future value annuity: $165.50\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# Calculating the annuity\nclass annuityBuilder:\n    def __init__(self, payment, interest_rate, periods, type):\n        self.payment = payment\n        self.interest_rate = interest_rate\n        self.periods = periods\n        self.type = type\n\n    def calculate_values(self):\n        if self.type =='PVOA':\n            return self.payment/self.interest_rate * (1 - 1/(1 + self.interest_rate) ** self.periods)\n        elif self.type =='PVD':\n            return self.payment/self.interest_rate * (1 - 1/(1 + self.interest_rate) ** self.periods) * (1 + self.interest_rate)\n\n        elif self.type =='FVOA':\n            return (self.payment/self.interest_rate) * ((1 + self.interest_rate) ** self.periods - 1) * (1 + self.interest_rate)\n\n        else:\n            return (self.payment/self.interest_rate) * ((1 + self.interest_rate) ** self.periods - 1 )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:25.126394Z","iopub.execute_input":"2025-08-21T15:27:25.126712Z","iopub.status.idle":"2025-08-21T15:27:25.160133Z","shell.execute_reply.started":"2025-08-21T15:27:25.126686Z","shell.execute_reply":"2025-08-21T15:27:25.158685Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"data = annuityBuilder(payment = 100, interest_rate = 0.10, periods = 10, type = 'FVOA')\nprint(f\"FVA value: {data.calculate_values():.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:25.161064Z","iopub.execute_input":"2025-08-21T15:27:25.161322Z","iopub.status.idle":"2025-08-21T15:27:25.185988Z","shell.execute_reply.started":"2025-08-21T15:27:25.161302Z","shell.execute_reply":"2025-08-21T15:27:25.184979Z"}},"outputs":[{"name":"stdout","text":"FVA value: 1753.12\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"# Combining and Simulating ","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Simulating the results\ntypes = ['PVOA', 'PVD', 'FVOA', 'FVD']\nannuity_results = {}\ntime = np.linspace(1,20,50)\n\nfor type in types:\n    results = annuityBuilder(payment = 100, interest_rate = 0.10, periods = time, type = type)\n    annuity_results[type] = results.calculate_values()\n    \n# Converting the results\ndf = pd.DataFrame(annuity_results, index = time)\n\n# Plotting the results\nplt.figure(figsize = (14,6))\ndf.plot()\nplt.xlabel('Maturity')\nplt.ylabel('Annuity Values ($)')\nplt.legend(frameon = False)\nplt.grid(False)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:25.187150Z","iopub.execute_input":"2025-08-21T15:27:25.187374Z","iopub.status.idle":"2025-08-21T15:27:27.550993Z","shell.execute_reply.started":"2025-08-21T15:27:25.187356Z","shell.execute_reply":"2025-08-21T15:27:27.549592Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"# Calculating Bond prices","metadata":{}},{"cell_type":"code","source":"class bond_valuation:\n    def __init__(self, interest_rate, face_value, maturity, coupon_payment):\n        self.interest_rate = interest_rate\n        self.face_value = face_value\n        self.maturity = maturity\n        self.coupon_payment = coupon_payment\n\n    def calculate_bond_price(self):\n        bond_price = (self.coupon_payment /self.interest_rate )* (1 - 1/ (1 + self.interest_rate) ** self.maturity) + (( self.face_value)/(1 + self.interest_rate) ** self.maturity)\n        return bond_price\n\n# Let's see the results\nbond_prices = {}\nmaturity = np.linspace(1,100,100)\ninterest_rate = np.linspace(-0.01,0.10,15)\n\nfor r in interest_rate:\n    prices = []\n    for m in maturity:\n        data = bond_valuation(interest_rate = np.round(r,4), face_value = 100, maturity = m, coupon_payment = 10)\n        prices.append(data.calculate_bond_price())\n    bond_prices[f\"{np.round(r*100, 2)}%\"] = prices\n\n# Converting to df\ndf_results = pd.DataFrame(bond_prices, index = maturity)\n\n# Plotting the figure\nplt.figure(figsize = (14, 6))\ndf_results.plot()\nplt.legend(title = 'Interest Rate', frameon = False, fontsize = 10)\nplt.grid(False)\nplt.title('Bond Prices Vs Maturity for Different Interest Rates')\nplt.xlabel('Maturity (T)')\nplt.ylabel('Bond Price ($)')\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:27.551825Z","iopub.execute_input":"2025-08-21T15:27:27.552188Z","iopub.status.idle":"2025-08-21T15:27:27.949395Z","shell.execute_reply.started":"2025-08-21T15:27:27.552167Z","shell.execute_reply":"2025-08-21T15:27:27.948207Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":5},{"cell_type":"markdown","source":"# Pricing Defaultable Bond\n\n$V_B = PV_c + PV_FV + PV_R$\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nclass pd_calculation:\n    def __init__(self, PD, FV, T, r, R):\n        self.PD = PD\n        self.R = R\n        self.FV = FV\n        self.r = r\n        self.T = T\n\n    # Considering default only happened later\n    def defaultable_zero_with_recovery(self):\n        p_0t = np.exp(- self.r * self.T) * ((1 - self.PD) * self.FV + self.FV * (1 - self.R) * self.PD)\n        return p_0t\n\n    def calculate_pd(self):\n        pd_0t = np.exp(- self.r * self.T) * ((1 - self.PD) * self.FV + self.FV * (1 - self.R) * self.PD)\n        pd = (pd_0t - (1 - self.PD) * np.exp(- self.r * self.T))/(self.R * np.exp(-self.r * self.T))\n\n\n# Calculation\nmodel = pd_calculation(PD = 0.05, FV = 100, T = 1, r = 0.04, R = 0.40)\np_0t = model.defaultable_zero_with_recovery()\nprint(f\"Value of the bond: {round(p_0t,2)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:27.952270Z","iopub.execute_input":"2025-08-21T15:27:27.952529Z","iopub.status.idle":"2025-08-21T15:27:27.966266Z","shell.execute_reply.started":"2025-08-21T15:27:27.952485Z","shell.execute_reply":"2025-08-21T15:27:27.964712Z"}},"outputs":[{"name":"stdout","text":"Value of the bond: 94.16\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# simulationg the bond prices with different PD and R\npd_0t = []\nRec = np.linspace(0, 1, 20)\npd = np.linspace(0, 1, 40)\nt = np.linspace(0, 1, 50)\n\nfor recovery in Rec:\n    for p_ in pd:\n        model = pd_calculation(PD = p_, FV = 100, T = 1, r = 0.04, R = recovery)\n        prices = model.defaultable_zero_with_recovery()\n        pd_0t.append((p_,prices))\n\npd_0t = pd.DataFrame(pd_0t)\npd_0t.columns = ['RR', 'BV']\npd_0t.set_index('RR', inplace = True)\nplt.plot(pd_0t)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:27.967279Z","iopub.execute_input":"2025-08-21T15:27:27.967567Z","iopub.status.idle":"2025-08-21T15:27:28.094048Z","shell.execute_reply.started":"2025-08-21T15:27:27.967536Z","shell.execute_reply":"2025-08-21T15:27:28.092114Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/3055521960.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mpd_0t\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mpd_0t\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd_0t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mpd_0t\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'RR'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'BV'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mpd_0t\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'RR'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'DataFrame'"],"ename":"AttributeError","evalue":"'numpy.ndarray' object has no attribute 'DataFrame'","output_type":"error"}],"execution_count":7},{"cell_type":"code","source":"# default probability with poisson distribution\nclass pd_calculation:\n    def __init_(self, R, lamda, T, r):\n        self.lamda = lamda\n        self.r = r\n        self.T = T\n        self.R = R\n\n    def pd_func(self):\n        p_0t = []\n        T = np.linspace(0, 10, 100)\n\n        for \n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.094795Z","iopub.status.idle":"2025-08-21T15:27:28.095120Z","shell.execute_reply.started":"2025-08-21T15:27:28.094974Z","shell.execute_reply":"2025-08-21T15:27:28.094989Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define the bond pricing class\nclass pd_calculation:\n    def __init__(self, PD, FV, T, r, R):\n        self.PD = PD\n        self.R = R\n        self.FV = FV\n        self.r = r\n        self.T = T\n\n    # Pricing formula for defaultable zero-coupon bond with recovery\n    def defaultable_zero_with_recovery(self):\n        p_0t = np.exp(- self.r * self.T) * ((1 - self.PD) * self.FV + self.FV * (1 - self.R) * self.PD)\n        return p_0t\n\n# Simulation of bond prices with varying PD and R\nresults = []\n\nRec = np.linspace(0, 1, 20)  # Recovery rates\nPDs = np.linspace(0, 1, 60)  # Probabilities of default\n\nfor recovery in Rec:\n    for pd_ in PDs:\n        model = pd_calculation(PD=pd_, FV=100, T=1, r=0.04, R=recovery)\n        price = model.defaultable_zero_with_recovery()\n        results.append((pd_, recovery, price))\n\n# Convert results to DataFrame\ndf = pd.DataFrame(results, columns=['PD', 'R', 'BondValue'])\n\n# Pivot the data for plotting\npivot_df = df.pivot(index='PD', columns='R', values='BondValue')\n\n# Plotting\nplt.figure(figsize=(10, 6))\nfor recovery in pivot_df.columns:\n    plt.plot(pivot_df.index, pivot_df[recovery], label=f'R = {recovery:.2f}')\n\nplt.xlabel('Probability of Default (PD)')\nplt.ylabel('Bond Value')\nplt.title('Defaultable Zero-Coupon Bond Value vs PD for Different Recovery Rates')\nplt.legend(frameon = False)\nplt.grid(False)\nplt.tight_layout()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.096552Z","iopub.status.idle":"2025-08-21T15:27:28.096877Z","shell.execute_reply.started":"2025-08-21T15:27:28.096702Z","shell.execute_reply":"2025-08-21T15:27:28.096714Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the bond pricing class\nclass pd_calculation:\n    def __init__(self, PD, FV, T, r, R):\n        self.PD = PD\n        self.R = R\n        self.FV = FV\n        self.r = r\n        self.T = T\n\n    # Pricing formula for defaultable zero-coupon bond with recovery\n    def defaultable_zero_with_recovery(self):\n        p_0t = np.exp(- self.r * self.T) * ((1 - self.PD) * self.FV + self.FV * (1 - self.R) * self.PD)\n        return p_0t\n\n# Simulation of bond prices with varying PD and R\nRec = np.linspace(0, 1, 20)  # Recovery rates\nPDs = np.linspace(0, 1, 40)  # Probabilities of default\n\nPD_grid, R_grid = np.meshgrid(PDs, Rec)\nBondValue_grid = np.zeros_like(PD_grid)\n\nfor i in range(PD_grid.shape[0]):\n    for j in range(PD_grid.shape[1]):\n        model = pd_calculation(PD=PD_grid[i, j], FV=100, T=1, r=0.04, R=R_grid[i, j])\n        BondValue_grid[i, j] = model.defaultable_zero_with_recovery()\n\n# Plotting the 3D surface\nfig = plt.figure(figsize=(12, 18))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(PD_grid, R_grid, BondValue_grid, cmap='viridis')\n\nax.set_xlabel('Probability of Default (PD)')\nax.set_ylabel('Recovery Rate (R)')\nax.set_zlabel('Bond Value')\nax.set_title('Defaultable Zero-Coupon Bond Value Surface')\n\nplt.tight_layout()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.098083Z","iopub.status.idle":"2025-08-21T15:27:28.098399Z","shell.execute_reply.started":"2025-08-21T15:27:28.098252Z","shell.execute_reply":"2025-08-21T15:27:28.098264Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the bond pricing class\nclass pd_calculation:\n    def __init__(self, PD, FV, T, r, R):\n        self.PD = PD\n        self.R = R\n        self.FV = FV\n        self.r = r\n        self.T = T\n\n    def defaultable_zero_with_recovery(self):\n        # Pricing formula for defaultable zero-coupon bond with recovery\n        p_0t = np.exp(- self.r * self.T) * ((1 - self.PD) * self.FV + self.FV * (1 - self.R) * self.PD)\n        return p_0t\n\n# Define ranges for PD, R, and T\nPD_range = np.linspace(0, 1, 40)\nR_range = np.linspace(0, 1, 40)\nT_range = [1, 3, 5, 10]\n\n# Create meshgrid for PD and R\nPD_mesh, R_mesh = np.meshgrid(PD_range, R_range)\n\n# Plotting 3D surfaces for each maturity\nfig = plt.figure(figsize=(16, 12))\n\nfor i, T in enumerate(T_range, 1):\n    ax = fig.add_subplot(2, 2, i, projection='3d')\n    Z = np.zeros_like(PD_mesh)\n\n    for j in range(PD_mesh.shape[0]):\n        for k in range(PD_mesh.shape[1]):\n            model = pd_calculation(PD=PD_mesh[j, k], FV=100, T=T, r=0.04, R=R_mesh[j, k])\n            Z[j, k] = model.defaultable_zero_with_recovery()\n\n    ax.plot_surface(PD_mesh, R_mesh, Z, cmap='viridis')\n    ax.set_title(f'Bond Price Surface (T = {T} years)')\n    ax.set_xlabel('Probability of Default (PD)')\n    ax.set_ylabel('Recovery Rate (R)')\n    ax.set_zlabel('Bond Price')\n\nplt.tight_layout()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.100641Z","iopub.status.idle":"2025-08-21T15:27:28.101068Z","shell.execute_reply.started":"2025-08-21T15:27:28.100884Z","shell.execute_reply":"2025-08-21T15:27:28.100904Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Stochastic PD","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# CIR process parameters\ndef simulate_cir_pd(kappa, theta, sigma, lambda0, T, dt, n_paths):\n    n_steps = int(T / dt)\n    pd_paths = np.zeros((n_paths, n_steps + 1))\n    pd_paths[:, 0] = lambda0\n\n    for t in range(1, n_steps + 1):\n        sqrt_lambda = np.sqrt(np.maximum(pd_paths[:, t - 1], 0))\n        dW = np.random.normal(0, np.sqrt(dt), size=n_paths)\n        pd_paths[:, t] = pd_paths[:, t - 1] + kappa * (theta - pd_paths[:, t - 1]) * dt + sigma * sqrt_lambda * dW\n        pd_paths[:, t] = np.clip(pd_paths[:, t], 0, 1)  # Ensure PD stays in [0, 1]\n\n    return pd_paths\n\n# Simulation parameters\nT = 5          # Time horizon in years\ndt = 0.01      # Time step\nn_paths = 20    # Number of simulation paths\n\n# CIR parameters for different initial values\nparams = [\n    {\"kappa\": 0.5, \"theta\": 0.2, \"sigma\": 0.1, \"lambda0\": 0.05},\n    {\"kappa\": 0.5, \"theta\": 0.2, \"sigma\": 0.1, \"lambda0\": 0.2},\n    {\"kappa\": 0.5, \"theta\": 0.2, \"sigma\": 0.1, \"lambda0\": 0.4}\n]\n\n# Plotting\nplt.figure(figsize=(12, 6))\ntime_grid = np.linspace(0, T, int(T / dt) + 1)\n\nfor param in params:\n    pd_paths = simulate_cir_pd(**param, T=T, dt=dt, n_paths=n_paths)\n    for i in range(n_paths):\n        plt.plot(time_grid, pd_paths[i], label=f\"λ₀={param['lambda0']}\" if i == 0 else \"\", alpha=0.7)\n\nplt.title(\"Stochastic Probability of Default (PD) using CIR Process\")\nplt.xlabel(\"Time (Years)\")\nplt.ylabel(\"PD\")\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.102653Z","iopub.status.idle":"2025-08-21T15:27:28.102955Z","shell.execute_reply.started":"2025-08-21T15:27:28.102818Z","shell.execute_reply":"2025-08-21T15:27:28.102830Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# BSM Model","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom scipy.stats import norm\n\nclass bs_model:\n    def __init__(self, sigma, r, T, K, S0, type):\n        self.sigma = sigma\n        self.r = r\n        self.T = T\n        self.S0 = S0\n        self.K = K\n        self.type = type\n\n    def BS_model(self):\n        d1 = (np.log(self.S0/self.K) + (self.r + (0.5 * self.sigma **2) * (self.T))) / (self.sigma * np.sqrt(self.T))\n        d2 = d1 - (self.sigma * np.sqrt(self.T))\n        \n        if self.type =='C':\n            return self.S0 * norm.cdf(d1) - self.K * np.exp(- self.r * self.T)* norm.cdf(d2)\n\n        else:\n            return self.K * np.exp(- self.r * self.T)* norm.cdf(-d2) - self.S0 * norm.cdf(- d1)\n\n# data given \nmodel_data = bs_model(sigma = 0.10, r = 0.02, S0 = 150, K = 100, T = 1, type = 'C')\nresult = model_data.BS_model()\nprint(f\"Call option result: {np.round(result,2)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.104134Z","iopub.status.idle":"2025-08-21T15:27:28.104929Z","shell.execute_reply.started":"2025-08-21T15:27:28.104732Z","shell.execute_reply":"2025-08-21T15:27:28.104749Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"results = {}\nstrikes = np.linspace(50, 251, 250)\n\nfor strike in strikes:\n    bs_data = bs_model(sigma = 0.20, r = 0.02, S0 = 100, K = strike, T = 1, type = 'C')\n    results[strike] = bs_data.BS_model()\n\nresults_df = pd.DataFrame(results, index =strikes)\nresults_df\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.106287Z","iopub.status.idle":"2025-08-21T15:27:28.106658Z","shell.execute_reply.started":"2025-08-21T15:27:28.106510Z","shell.execute_reply":"2025-08-21T15:27:28.106527Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nfrom scipy.stats import norm \n\nclass Black_Scholes:\n    def __init__(self, S0, K, r, sigma, T, type):\n        self.S0 = S0\n        self.K = K\n        self.r = r\n        self.sigma = sigma\n        self.T = T\n        self.type = type\n\n    def BS_Model(self):\n        d1 = (np.log(self.S0/self.K) + ((self.r + 0.5 * self.sigma ** 2) * self.T))/(self.sigma * np.sqrt(self.T))\n        d2 = d1 - (self.sigma * np.sqrt(self.T))\n\n        if self.type == 'C':\n            return self.S0 * norm.cdf(d1) - self.K * np.exp(- self.r * self.T) * norm.cdf(d2)\n\n        else:\n            return self.K * np.exp(- self.r * self.T) * norm.cdf(-d2) - self.S0 * norm.cdf(-d1)\n\n\n# Toy models\ndata_prep = Black_Scholes(S0 = 100, K = 120, r = 0.02, sigma = 0.20, T = 1, type = 'P')\noption_results = data_prep.BS_Model()\nprint(f\"Option Price: {np.round(option_results, 2)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.107172Z","iopub.status.idle":"2025-08-21T15:27:28.107392Z","shell.execute_reply.started":"2025-08-21T15:27:28.107283Z","shell.execute_reply":"2025-08-21T15:27:28.107293Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Doing the simulations with different strikes for both Put and Call price\nstrikes = np.arange(80, 180, 5)\noption_prices = []\n\nfor strike in strikes:\n        call_price = Black_Scholes(S0 = 100, K = strike, r = 0.02, sigma = 0.20, T = 1, type = 'C').BS_Model()\n        put_price = Black_Scholes(S0 = 100, K = strike, r = 0.02, sigma = 0.20, T = 1, type = 'P').BS_Model()\n        option_prices.append((strike, round(call_price, 2), round(put_price, 2)))\n\ndf_results = pd.DataFrame(option_prices, columns = ['Strike', 'Call Price', 'Put Price'])\ndf_results.set_index('Strike', inplace = True)\nprint(df_results.head())\n\n# Plotting the results\ndf_results.plot()\nplt.title('Put and Call Price for Different Strikes')\nplt.xlabel('K')\nplt.ylabel('Option Prices')\nplt.legend(frameon = False)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.108256Z","iopub.status.idle":"2025-08-21T15:27:28.108522Z","shell.execute_reply.started":"2025-08-21T15:27:28.108395Z","shell.execute_reply":"2025-08-21T15:27:28.108406Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Greeks","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom scipy.stats import norm \n\nclass Black_Scholes:\n    def __init__(self, S0, K, r, sigma, T, type):\n        self.S0 = S0\n        self.K = K\n        self.r = r\n        self.sigma = sigma\n        self.T = T\n        self.type = type\n\n    def BS_Model(self):\n        d1 = (np.log(self.S0/self.K) + ((self.r + 0.5 * self.sigma ** 2) * self.T))/(self.sigma * np.sqrt(self.T))\n        d2 = d1 - (self.sigma * np.sqrt(self.T))\n\n        if self.type == 'C':\n            return self.S0 * norm.cdf(d1) - self.K * np.exp(- self.r * self.T) * norm.cdf(d2)\n\n        else:\n            return self.K * np.exp(- self.r * self.T) * norm.cdf(-d2) - self.S0 * norm.cdf(-d1)\n\n\n    def option_greeks(self):\n        d1 = (np.log(self.S0/self.K) + (self.r + 0.5 * self.sigma ** 2) * self.T)/(self.sigma * np.sqrt(self.T))\n        d2 = d1 - (self.sigma * np.sqrt(self.T))\n        \n        if self.type =='C':\n            # greeks_c = []\n            delta = norm.cdf(d1)\n            gamma = norm.pdf(d1)/(self.S0 * self.sigma * np.sqrt(self.T))\n            vega = self.S0 * norm.pdf(d1) * np.sqrt(self.T)\n            theta = - (self.S0 * self.sigma * norm.pdf(d1))/(2 * np.sqrt(self.T)) \\\n                    - (self.r * self.K * np.exp(- self.r * self.T) * norm.cdf(d2))\n            rho = self.K * self.T * np.exp( - self.r * self.T) * norm.cdf(d2)\n            vanna = - (norm.pdf(d1) * d2) / self.sigma\n            volga = (vega * d1 * d2 )/ self.sigma\n            charm = - norm.pdf(d1) * (((2 * self.r * self.T) - (d2 * self.sigma * np.sqrt(self.T)))/ \\\n                    (2 * self.T * self.sigma * np.sqrt(self.T)))\n            # greeks_c.append((delta, gamma, vega, theta, rho, vanna, volga, charm))\n            # return greeks_c\n\n        else:\n            # greeks_p = []\n            delta = norm.cdf(d1) - 1\n            gamma = norm.pdf(d1)/(self.S0 * self.sigma * np.sqrt(self.T))\n            vega = self.S0 * np.sqrt(self.T) * norm.pdf(d1)\n            theta = - (self.S0 * norm.pdf(d1) * self.sigma)/(2 * np.sqrt(self.T)) \\\n                    + self.r * self.K * np.exp(-self.r * self.T) * norm.cdf(-d2)\n            rho = - self.K * self.T * np.exp(-self.r * self.T) * norm.cdf(-d2)\n            vanna = - (norm.pdf(d1) * d2)/self.sigma\n            volga = (vega * d1 * d2) / self.sigma\n            charm = - norm.pdf(d1) * ((2 * self.r * self.T + d2 * self.sigma * np.sqrt(self.T))/\\\n                                     2 * self.T * self.sigma * np.sqrt(self.T))\n            # greeks_p.append((delta, gamma, vega, theta, rho, vanna, volga, charm))\n            # return greeks_p\n\n        return {\n            'Delta': round(delta, 4),\n            'Gamma': round(gamma, 4),\n            'Vega': round(vega, 4),\n            'Theta': round(theta, 4),\n            'Rho': round(rho, 4),\n            'Vanna': round(vanna, 4),\n            'Volga': round(volga, 4),        \n            'Charm': round(charm, 4)\n        }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.109116Z","iopub.status.idle":"2025-08-21T15:27:28.109378Z","shell.execute_reply.started":"2025-08-21T15:27:28.109230Z","shell.execute_reply":"2025-08-21T15:27:28.109239Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Sensitivity Analysis ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\noption_results_c = []\noptions_results_p = []\nstrikes = np.arange(80, 180, 5)\n\nfor strike in strikes:\n    model_c = Black_Scholes(S0 = 100, K = strike, r = 0.02, sigma = 0.20, T = 1, type = 'C')\n    prices_c = model_c.BS_Model()\n    greeks_c = model_c.option_greeks()\n\n    row = {'Strike': strike, 'Call Price': round(prices_c, 2)}\n    row.update(greeks_c)\n    option_results_c.append(row)\n\ncall_results = pd.DataFrame(option_results_c)\ncall_results.set_index('Strike', inplace = True)\ncall_results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.110207Z","iopub.status.idle":"2025-08-21T15:27:28.110451Z","shell.execute_reply.started":"2025-08-21T15:27:28.110331Z","shell.execute_reply":"2025-08-21T15:27:28.110341Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\noption_results_p = []\nstrikes = np.arange(80, 180, 5)\n\nfor strike in strikes:\n    model_p = Black_Scholes(S0 = 100, K = strike, r = 0.02, sigma = 0.20, T = 1, type = 'P')\n    prices_p = model_p.BS_Model()\n    greeks_p = model_p.option_greeks()\n\n\n    row = {'Strike': strike, 'Put Price': round(prices_p, 2)}\n    row.update(greeks_p)\n    option_results_p.append(row)\n\nput_results = pd.DataFrame(option_results_p)\nput_results.set_index('Strike', inplace = True)\nput_results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.113281Z","iopub.status.idle":"2025-08-21T15:27:28.113596Z","shell.execute_reply.started":"2025-08-21T15:27:28.113461Z","shell.execute_reply":"2025-08-21T15:27:28.113474Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import yfinance as yf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.114424Z","iopub.status.idle":"2025-08-21T15:27:28.115159Z","shell.execute_reply.started":"2025-08-21T15:27:28.114727Z","shell.execute_reply":"2025-08-21T15:27:28.114827Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_ = yf.download('QQQ')\ndf_.columns = ['Close',\t'High',\t'Low',\t'Open',\t'Volume']\ndf_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.117151Z","iopub.status.idle":"2025-08-21T15:27:28.117490Z","shell.execute_reply.started":"2025-08-21T15:27:28.117361Z","shell.execute_reply":"2025-08-21T15:27:28.117375Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Stochastic Modeling","metadata":{}},{"cell_type":"code","source":"# ABM and GBM model\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n\nnp.random.seed(11)\n\nclass sm_model:\n    def __init__(self, T, N, S0, mu, sigma, n_paths):\n        self.T = T\n        self.N = N\n        self.S0 = S0\n        self.sigma = sigma\n        self.mu = mu\n        self.n_paths = n_paths\n\n    def abm_model(self):\n        t = np.linspace(0, self.T, self.N)\n        dt = self.T/self.N\n        abm = np.zeros((self.N, self.n_paths))\n        abm[0] = self.S0\n        \n        for i in range(self.n_paths):\n            for j in range(1, self.N):\n                abm[j, i] = abm[j-1, i] + self.mu * dt + self.sigma * np.sqrt(dt) * np.random.normal()\n\n        return abm\n\n    def gbm_model(self):\n        t = np.linspace(0, self.T, self.N)\n        dt = self.T/self.N\n        gbm = np.zeros((self.N, self.n_paths))\n        gbm[0] = self.S0\n\n        for i in range(self.n_paths):\n            for j in range(1, self.N):\n                gbm[j, i] = gbm[j - 1, i] * np.exp((self.mu - 0.5 * self.sigma ** 2) * dt + self.sigma * np.sqrt(dt) * np.random.normal())\n\n        return gbm\n\n\n# Simulating the prices\nt = np.linspace(0, T, N)\nmodel = sm_model(T = 1, N = 252, S0 = 100, mu = 0.5, sigma = 0.2, n_paths = 100)\nabm = model.abm_model()\ngbm = model.gbm_model()\n\n\n# plotting the figures ABM\nplt.figure(figsize = (12,8))\nplt.plot(t, abm)\nplt.axhline(np.mean(abm), color = 'black', label = 'Mean')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n# plotting the figures GBM\nplt.figure(figsize = (12,8))\nplt.plot(t, gbm)\nplt.axhline(np.mean(gbm), color = 'black', label = 'Mean')\nplt.legend()\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.118103Z","iopub.status.idle":"2025-08-21T15:27:28.118347Z","shell.execute_reply.started":"2025-08-21T15:27:28.118246Z","shell.execute_reply":"2025-08-21T15:27:28.118255Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nS0 = 100       # Initial stock price\nmu = 0.5       # Drift\nsigma = 2      # Volatility\nT = 1          # Time horizon (1 year)\nN = 252        # Number of time steps (trading days)\ndt = T / N     # Time step size\n\n# Generate Brownian increments\ndW = np.random.normal(0, np.sqrt(dt), N)\nW = np.cumsum(dW)\n\n# Simulate ABM\nt = np.linspace(0, T, N)\nS = S0 + mu * t + sigma * W\n\n# Plot\nplt.figure(figsize=(10, 5))\nplt.plot(t, S)\nplt.title(\"Arithmetic Brownian Motion Simulation\")\nplt.xlabel(\"Time (Years)\")\nplt.ylabel(\"Stock Price\")\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.119473Z","iopub.status.idle":"2025-08-21T15:27:28.119829Z","shell.execute_reply.started":"2025-08-21T15:27:28.119649Z","shell.execute_reply":"2025-08-21T15:27:28.119662Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nS0 = 100       # Initial stock price\nmu = 0.5       # Drift\nsigma = 2      # Volatility\nT = 1          # Time horizon (1 year)\nN = 252        # Number of time steps (trading days)\ndt = T / N     # Time step size\nsimulations = 100  # Number of simulations\n\n# Time vector\nt = np.linspace(0, T, N)\n\n# Simulate 100 paths\nplt.figure(figsize=(12, 6))\nfor _ in range(simulations):\n    dW = np.random.normal(0, np.sqrt(dt), N)\n    W = np.cumsum(dW)\n    S = S0 + mu * t + sigma * W\n    plt.plot(t, S, alpha=0.5)\n\nplt.title(\"100 Simulations of Arithmetic Brownian Motion\")\nplt.xlabel(\"Time (Years)\")\nplt.ylabel(\"Stock Price\")\nplt.grid(True)\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.120347Z","iopub.status.idle":"2025-08-21T15:27:28.120625Z","shell.execute_reply.started":"2025-08-21T15:27:28.120489Z","shell.execute_reply":"2025-08-21T15:27:28.120501Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Let's do pricing yeild curve\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Synthetic bond data: (maturity in years, coupon rate, price)\nbonds = [\n    (1, 0.02, 98.0),\n    (2, 0.025, 97.5),\n    (3, 0.03, 97.0),\n    (4, 0.035, 96.5),\n    (5, 0.04, 96.0)\n]\n\n# Function to calculate spot rates using bootstrapping\ndef bootstrap_spot_rates(bonds):\n    spot_rates = []\n    for i, (maturity, coupon, price) in enumerate(bonds):\n        coupon_payment = coupon * 100\n        if i == 0:\n            # First bond: simple calculation\n            spot_rate = (100 + coupon_payment) / price - 1\n        else:\n            # Subsequent bonds: solve for spot rate iteratively\n            pv_coupons = sum([coupon_payment / (1 + spot_rates[j])**(j + 1) for j in range(i)])\n            spot_rate = ((100 + coupon_payment - pv_coupons) / price)**(1 / maturity) - 1\n        spot_rates.append(spot_rate)\n    return spot_rates\n\n# Calculate spot rates\nspot_rates = bootstrap_spot_rates(bonds)\n\n# Extract maturities for plotting\nmaturities = [bond[0] for bond in bonds]\n\n# Plot the yield curve\nplt.figure(figsize=(10, 6))\nplt.plot(maturities, [rate * 100 for rate in spot_rates], marker='o', linestyle='-')\nplt.title('Yield Curve using Bootstrapping Method')\nplt.xlabel('Maturity (Years)')\nplt.ylabel('Spot Rate (%)')\nplt.grid(True)\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.121081Z","iopub.status.idle":"2025-08-21T15:27:28.121337Z","shell.execute_reply.started":"2025-08-21T15:27:28.121203Z","shell.execute_reply":"2025-08-21T15:27:28.121214Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Synthetic bond data: (maturity in years, coupon rate, price)\nbonds = [\n    (1, 0.02, 98.0),\n    (2, 0.025, 97.5),\n    (3, 0.03, 97.0),\n    (4, 0.035, 96.5),\n    (5, 0.04, 96.0)\n]\n\n# Face value of the bond\nface_value = 100\n\n# Store spot rates\nspot_rates = []\n\n# Step-by-step calculation\nfor i, (maturity, coupon, price) in enumerate(bonds):\n    coupon_payment = coupon * face_value\n    print(f\"\\nYear {maturity}:\")\n    print(f\"Coupon Payment: {coupon_payment:.2f}\")\n    if i == 0:\n        # First bond: simple calculation\n        spot_rate = (face_value + coupon_payment) / price - 1\n        print(f\"Spot Rate Calculation: ({face_value} + {coupon_payment}) / {price} - 1\")\n        print(f\"Spot Rate: {spot_rate:.4%}\")\n    else:\n        # Discount earlier coupon payments\n        pv_coupons = 0\n        for j in range(i):\n            discounted = coupon_payment / (1 + spot_rates[j])**(j + 1)\n            pv_coupons += discounted\n            print(f\"Discounted Coupon Year {j+1}: {discounted:.2f}\")\n        remaining_value = face_value + coupon_payment - pv_coupons\n        print(f\"Remaining Value to Discount: {remaining_value:.2f}\")\n        spot_rate = (remaining_value / price)**(1 / maturity) - 1\n        print(f\"Spot Rate Calculation: ({remaining_value} / {price})^(1/{maturity}) - 1\")\n        print(f\"Spot Rate: {spot_rate:.4%}\")\n    spot_rates.append(spot_rate)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.122340Z","iopub.status.idle":"2025-08-21T15:27:28.122542Z","shell.execute_reply.started":"2025-08-21T15:27:28.122438Z","shell.execute_reply":"2025-08-21T15:27:28.122446Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"spot_rates","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.123115Z","iopub.status.idle":"2025-08-21T15:27:28.123366Z","shell.execute_reply.started":"2025-08-21T15:27:28.123232Z","shell.execute_reply":"2025-08-21T15:27:28.123241Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Treasury data: (maturity in years, yield in decimal)\ntreasury_data = [\n    (1, 0.0411),\n    (2, 0.03683),\n    (5, 0.03834),\n    (10, 0.04314),\n    (30, 0.04926)\n]\n\nface_value = 100\n\n# Estimate bond prices assuming coupon rate equals yield and annual payments\ndef estimate_price(maturity, yield_rate):\n    coupon = yield_rate * face_value\n    price = sum([coupon / (1 + yield_rate)**t for t in range(1, maturity)]) + (face_value + coupon) / (1 + yield_rate)**maturity\n    return price\n\n# Estimate prices for each bond\nbond_data = []\nfor maturity, yield_rate in treasury_data:\n    price = estimate_price(maturity, yield_rate)\n    bond_data.append((maturity, yield_rate, price))\n\n# Bootstrapping to derive spot rates\nspot_rates = []\n\nfor i, (maturity, coupon_rate, price) in enumerate(bond_data):\n    coupon = coupon_rate * face_value\n    if i == 0:\n        # First year: direct calculation\n        r = (face_value + coupon) / price - 1\n    else:\n        pv_coupons = sum([coupon / (1 + spot_rates[j])**(j + 1) for j in range(i)])\n        remaining_value = face_value + coupon - pv_coupons\n        r = (remaining_value / price)**(1 / maturity) - 1\n    spot_rates.append(r)\n\n# Plotting the yield curve\nmaturities = [m[0] for m in bond_data]\n\nplt.figure(figsize=(10, 6))\nplt.plot(maturities, [r * 100 for r in spot_rates], marker='o', label='Spot Rate Curve')\nplt.plot(maturities, [y * 100 for _, y, _ in bond_data], marker='x', linestyle='--', label='Yield to Maturity')\nplt.title('US Treasury Yield Curve via Bootstrapping')\nplt.xlabel('Maturity (Years)')\nplt.ylabel('Rate (%)')\nplt.grid(True)\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"yield_curve.png\")\nprint(\"Bootstrapped yield curve saved as 'yield_curve.png'.\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T15:27:28.123963Z","iopub.status.idle":"2025-08-21T15:27:28.124136Z","shell.execute_reply.started":"2025-08-21T15:27:28.124054Z","shell.execute_reply":"2025-08-21T15:27:28.124062Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}